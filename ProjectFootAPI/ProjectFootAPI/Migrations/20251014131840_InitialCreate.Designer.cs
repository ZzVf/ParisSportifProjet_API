// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectFootAPI.Data;

#nullable disable

namespace ProjectFootAPI.Migrations
{
    [DbContext(typeof(ProjectFootContext))]
    [Migration("20251014131840_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClientClub", b =>
                {
                    b.Property<int>("FavoriteClubsId")
                        .HasColumnType("integer");

                    b.Property<int>("FavoritesId")
                        .HasColumnType("integer");

                    b.HasKey("FavoriteClubsId", "FavoritesId");

                    b.HasIndex("FavoritesId");

                    b.ToTable("ClientClub");
                });

            modelBuilder.Entity("ClientLigue", b =>
                {
                    b.Property<int>("FavoriteLiguesId")
                        .HasColumnType("integer");

                    b.Property<int>("FavoritesId")
                        .HasColumnType("integer");

                    b.HasKey("FavoriteLiguesId", "FavoritesId");

                    b.HasIndex("FavoritesId");

                    b.ToTable("ClientLigue");
                });

            modelBuilder.Entity("ProjectFootAPI.Model.Bet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("BetTiming")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ClientId")
                        .HasColumnType("integer");

                    b.Property<int>("MatchId")
                        .HasColumnType("integer");

                    b.Property<int>("Point")
                        .HasColumnType("integer");

                    b.Property<bool>("isVictory")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("MatchId");

                    b.ToTable("Bets");
                });

            modelBuilder.Entity("ProjectFootAPI.Model.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Points")
                        .HasColumnType("integer");

                    b.Property<bool>("isAdmin")
                        .HasColumnType("boolean");

                    b.Property<bool>("isBlocked")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("ProjectFootAPI.Model.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LigueId")
                        .HasColumnType("integer");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Ranking")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("LigueId");

                    b.HasIndex("Ranking", "LigueId")
                        .IsUnique();

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("ProjectFootAPI.Model.Ligue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Ligues");
                });

            modelBuilder.Entity("ProjectFootAPI.Model.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ClubId1")
                        .HasColumnType("integer");

                    b.Property<int>("ClubId2")
                        .HasColumnType("integer");

                    b.Property<DateTime>("MatchDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Score1")
                        .HasColumnType("integer");

                    b.Property<int>("Score2")
                        .HasColumnType("integer");

                    b.Property<bool>("isCanceled")
                        .HasColumnType("boolean");

                    b.Property<bool>("isTopMatch")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("ClubId1");

                    b.HasIndex("ClubId2");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("ClientClub", b =>
                {
                    b.HasOne("ProjectFootAPI.Model.Club", null)
                        .WithMany()
                        .HasForeignKey("FavoriteClubsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectFootAPI.Model.Client", null)
                        .WithMany()
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClientLigue", b =>
                {
                    b.HasOne("ProjectFootAPI.Model.Ligue", null)
                        .WithMany()
                        .HasForeignKey("FavoriteLiguesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectFootAPI.Model.Client", null)
                        .WithMany()
                        .HasForeignKey("FavoritesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProjectFootAPI.Model.Bet", b =>
                {
                    b.HasOne("ProjectFootAPI.Model.Client", "Client")
                        .WithMany("Bets")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectFootAPI.Model.Match", "Match")
                        .WithMany("Bets")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Match");
                });

            modelBuilder.Entity("ProjectFootAPI.Model.Club", b =>
                {
                    b.HasOne("ProjectFootAPI.Model.Ligue", "Ligue")
                        .WithMany("Clubs")
                        .HasForeignKey("LigueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ligue");
                });

            modelBuilder.Entity("ProjectFootAPI.Model.Match", b =>
                {
                    b.HasOne("ProjectFootAPI.Model.Club", "Club1")
                        .WithMany("MatchesClub1")
                        .HasForeignKey("ClubId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectFootAPI.Model.Club", "Club2")
                        .WithMany("MatchesClub2")
                        .HasForeignKey("ClubId2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Club1");

                    b.Navigation("Club2");
                });

            modelBuilder.Entity("ProjectFootAPI.Model.Client", b =>
                {
                    b.Navigation("Bets");
                });

            modelBuilder.Entity("ProjectFootAPI.Model.Club", b =>
                {
                    b.Navigation("MatchesClub1");

                    b.Navigation("MatchesClub2");
                });

            modelBuilder.Entity("ProjectFootAPI.Model.Ligue", b =>
                {
                    b.Navigation("Clubs");
                });

            modelBuilder.Entity("ProjectFootAPI.Model.Match", b =>
                {
                    b.Navigation("Bets");
                });
#pragma warning restore 612, 618
        }
    }
}
